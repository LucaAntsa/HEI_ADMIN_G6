name: CI/CD Preprod Groupe6

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
  workflow_dispatch:
  schedule:
    - cron: "0 3,11,19 * * *"

env:
  # Configuration de base
  NODE_VERSION: 18.19.0
  JAVA_VERSION: "17"
  AWS_REGION: eu-west-3
  BASE_URL: https://preprod.admin.hei.school
  INSTATUS_API_VERSION: v3

  # URLs et endpoints
  REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
  INSTATUS_API_URL: https://api.instatus.com/${{ secrets.INSTATUS_API_VERSION }}
  WAF_JS_API_URL: ${{ secrets.WAF_JS_API_URL }}
  SONARCLOUD_URL: https://sonarcloud.io

  # Secrets Instatus
  INSTATUS_PAGE_ID: ${{ secrets.INSTATUS_PAGE_ID }}
  INSTATUS_API_KEY: ${{ secrets.INSTATUS_API_KEY }}

jobs:
  lint-and-format:
    name: "Lint & Format"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Clean npm config
        run: rm -f ~/.npmrc .npmrc

      - name: Configure AWS Prod Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Prod npmrc
        run: sh ./initNpmrc.sh hei-store npm-hei-school 088312068315

      - name: Configure AWS Preprod Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PREPROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PREPROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          unset-current-credentials: true

      - name: Setup Preprod npmrc
        run: sh ./initNpmrc.sh hei-store npm-hei-lab 057045785189

      - name: Install dependencies
        run: npm ci

      - name: Run format check
        run: npm run format:check

  e2e-tests:
    name: "End-to-End Tests"
    needs: lint-and-format
    runs-on: ubuntu-latest
    timeout-minutes: 35
    env:
      CYPRESS_BASE_URL: ${{ secrets.BASE_URL }}
      CYPRESS_INSTATUS_API_KEY: ${{ secrets.INSTATUS_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Configure AWS environments
        run: |
          aws configure set aws_access_key_id ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ env.AWS_REGION }}
          sh ./initNpmrc.sh hei-store npm-hei-school 088312068315
          aws configure set aws_access_key_id ${{ secrets.PREPROD_AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.PREPROD_AWS_SECRET_ACCESS_KEY }}
          sh ./initNpmrc.sh hei-store npm-hei-lab 057045785189

      - name: Install tools
        run: |
          npm install --location=global sonar-scanner
          npm install --save-dev ts-node typescript

      - name: Get application version
        id: read-version
        uses: CumulusDS/get-yaml-paths-action@v0.1.0
        with:
          file: version.yml
          version: version

      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        env:
          CYPRESS_ADMIN1_EMAIL: ${{ secrets.ADMIN1_EMAIL }}
          CYPRESS_ADMIN1_PASSWORD: ${{ secrets.ADMIN1_PASSWORD }}
          CYPRESS_MANAGER1_EMAIL: ${{ secrets.MANAGER1_EMAIL }}
          CYPRESS_MANAGER1_PASSWORD: ${{ secrets.MANAGER1_PASSWORD }}
          CYPRESS_TEACHER1_EMAIL: ${{ secrets.TEACHER1_EMAIL }}
          CYPRESS_TEACHER1_PASSWORD: ${{ secrets.TEACHER1_PASSWORD }}
          CYPRESS_STUDENT1_EMAIL: ${{ secrets.STUDENT1_EMAIL }}
          CYPRESS_STUDENT1_PASSWORD: ${{ secrets.STUDENT1_PASSWORD }}
          CYPRESS_MONITOR1_EMAIL: ${{ secrets.MONITOR1_EMAIL }}
          CYPRESS_MONITOR1_PASSWORD: ${{ secrets.MONITOR1_PASSWORD }}
        with:
          command: npx cypress run --e2e --env codeCoverage=true
          video: false

      - name: Upload test screenshots on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: cypress/screenshots/
          retention-days: 1

      - name: Run SonarQube analysis
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_FOR_CONVENTIONAL_CHANGELOG }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx nyc report --reporter=lcov
          npm run test:merge:reports
          sonar-scanner \
            -Dsonar.projectVersion=${{ steps.read-version.outputs.version }} \
            -Dsonar.organization=hei-school \
            -Dsonar.projectKey=hei_admin-ui \
            -Dsonar.branch.name=${{ github.ref_name }} \
            -Dsonar.host.url=${{ env.SONARCLOUD_URL }} \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: Update Instatus (Success)
        if: success()
        run: |
          services=(
            "auth:${{ secrets.INSTATUS_AUTH_WEBHOOK_COMPONENT_ID }}"
            "payment:${{ secrets.INSTATUS_PAYMENT_WEBHOOK_COMPONENT_ID }}"
            "presence:${{ secrets.INSTATUS_PRESENCE_WEBHOOK_COMPONENT_ID }}"
            "etudiant:${{ secrets.INSTATUS_ETUDIANT_WEBHOOK_COMPONENT_ID }}"
          )

          for service in "${services[@]}"; do
            IFS=':' read -r service_name component_id <<< "$service"
            curl -X POST \
              "$INSTATUS_API_URL/$INSTATUS_PAGE_ID/components/$component_id" \
              -H "Authorization: Bearer $INSTATUS_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                "status": "operational",
                "name": "'"${service_name^}"' Service",
                "description": "Tests E2E réussis - $(date +"%Y-%m-%d %H:%M")"
              }' || echo "Failed to update ${service_name} status"
          done

      - name: Update Instatus (Failure)
        if: failure()
        run: |
          services=(
            "auth:${{ secrets.INSTATUS_AUTH_WEBHOOK_COMPONENT_ID }}"
            "payment:${{ secrets.INSTATUS_PAYMENT_WEBHOOK_COMPONENT_ID }}"
            "presence:${{ secrets.INSTATUS_PRESENCE_WEBHOOK_COMPONENT_ID }}"
            "etudiant:${{ secrets.INSTATUS_ETUDIANT_WEBHOOK_COMPONENT_ID }}"
          )

          for service in "${services[@]}"; do
            IFS=':' read -r service_name component_id <<< "$service"
            curl -X POST \
              "$INSTATUS_API_URL/$INSTATUS_PAGE_ID/components/$component_id" \
              -H "Authorization: Bearer $INSTATUS_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                "status": "major_outage",
                "name": "'"${service_name^}"' Service",
                "description": "Échec des tests E2E - $(date +"%Y-%m-%d %H:%M")"
              }' || echo "Failed to update ${service_name} status"
          done

  build-app:
    name: "Build Application"
    needs: e2e-tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Clean environment
        run: |
          rm -rf node_modules
          npm cache clean --force

      - name: Configure AWS Prod Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Prod npmrc
        run: sh ./initNpmrc.sh hei-store npm-hei-school 088312068315

      - name: Build application
        run: |
          npm ci
          NODE_OPTIONS="--max-old-space-size=4096" npm run build

  cleanup-data:
    name: "Cleanup Preprod Data"
    if: github.ref_name == 'main'
    needs: build-app
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Trigger cleanup endpoint
        run: |
          curl -X POST ${{ env.BASE_URL }}/api/cleanup \
            -H "Authorization: Bearer ${{ secrets.PREPROD_CLEANUP_TOKEN }}" \
            -H "Content-Type: application/json"
